package com.github.sstone.amqp

import akka.actor.ActorRef
import Amqp._
import com.rabbitmq.client.{Envelope, Channel, DefaultConsumer}
import com.rabbitmq.client.AMQP.BasicProperties
import akka.actor.actorRef2Scala


object RpcClient {

  private[amqp] case class RpcResult(destination: ActorRef, expected: Int, deliveries: scala.collection.mutable.ListBuffer[Delivery])

  case class Request(publish: List[Publish], numberOfResponses: Int = 1)

  case class Response(deliveries: List[Delivery])

  case class Undelivered(msg: ReturnedMessage)

}

class RpcClient(channelParams: Option[ChannelParameters] = None) extends ChannelOwner(channelParams) {

  import RpcClient._

  var queue: String = ""
  var consumer: Option[DefaultConsumer] = None
  var counter: Int = 0
  var correlationMap = scala.collection.mutable.Map.empty[String, RpcResult]

  override def onChannel(channel: Channel) {
    // create a private, exclusive reply queue; its name will be randomly generated by the broker
    queue = declareQueue(channel, QueueParameters("", passive = false, exclusive = true)).getQueue
    consumer = Some(new DefaultConsumer(channel) {
      override def handleDelivery(consumerTag: String, envelope: Envelope, properties: BasicProperties, body: Array[Byte]) {
        self ! Delivery(consumerTag, envelope, properties, body)
      }
    })
    channel.basicConsume(queue, false, consumer.get)
    correlationMap.clear()
  }

  when(ChannelOwner.Connected) {
    case Event(Publish(exchange, key, body, properties, mandatory, immediate), ChannelOwner.Connected(channel)) => {
      val props = properties.getOrElse(new BasicProperties()).builder.build()
      channel.basicPublish(exchange, key, mandatory, immediate, props, body)
      stay
    }
    case Event(Request(publish, numberOfResponses), ChannelOwner.Connected(channel)) => {
      counter = counter + 1
      publish.foreach(p => {
        val props = p.properties.getOrElse(new BasicProperties()).builder.correlationId(counter.toString).replyTo(queue).build()
        channel.basicPublish(p.exchange, p.key, p.mandatory, p.immediate, props, p.body)
      })
      if (numberOfResponses > 0) {
        correlationMap += (counter.toString -> RpcResult(sender, numberOfResponses, collection.mutable.ListBuffer.empty[Delivery]))
      }
      stay
    }
    case Event(delivery@Delivery(consumerTag: String, envelope: Envelope, properties: BasicProperties, body: Array[Byte]), ChannelOwner.Connected(channel)) => {
      channel.basicAck(envelope.getDeliveryTag, false)
      correlationMap.get(properties.getCorrelationId) match {
        case Some(results) => {
          results.deliveries += delivery
          if (results.deliveries.length == results.expected) {
            results.destination ! Response(results.deliveries.toList)
            correlationMap -= properties.getCorrelationId
          }
        }
        case None => log.warning("unexpected message with correlation id " + properties.getCorrelationId)
      }
      stay
    }
    case Event(msg@ReturnedMessage(replyCode, replyText, exchange, routingKey, properties, body), ChannelOwner.Connected(channel)) => {
      correlationMap.get(properties.getCorrelationId) match {
        case Some(results) => {
          results.destination ! RpcClient.Undelivered(msg)
          correlationMap -= properties.getCorrelationId
        }
        case None => log.warning("unexpected returned message with correlation id " + properties.getCorrelationId)
      }
      stay
    }
  }
}
